version: '3'

services:
  frontend:
    restart: always
    container_name: frontend
    build: ./
    ports:
      - "3000:3000"  # Portul pe care rulează aplicația frontend
    environment:
      - NEXT_PUBLIC_API=${NEXT_PUBLIC_API}
      - NEXT_PUBLIC_SLACK_URL=${NEXT_PUBLIC_SLACK_URL}
      - NEXT_PUBLIC_BRAND=${NEXT_PUBLIC_BRAND}
      - NEXT_PUBLIC_FRONTEND_URL=${FRONTEND_URL}
      - REVALIDATE_SECRET=${REVALIDATE_SECRET}
    depends_on:
      - database
    networks:
      - marweb
      - nestjs

  nestjs:
    container_name: backend
    build: ./marwebBlogNestJs
    restart: always
    ports:
      - "5000:5000"  # Portul pe care rulează aplicația Nest.js
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./public_files_backup:/backup  # acesta este volumul pentru backup
    depends_on:
      - database
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
      - ADMIN_DASHBOARD_URL=${ADMIN_DASHBOARD_URL}
      - MAILER_HOST=${MAILER_HOST}
      - MAILER_PORT=${MAILER_PORT}
      - MAILER_SECURE=${MAILER_SECURE}
      - MAILER_USER=${MAILER_USER}
      - MAILER_PASS=${MAILER_PASS}
      - MAILER_DEFAULT_FROM=${MAILER_DEFAULT_FROM}
      - REVALIDATE_SECRET=${REVALIDATE_SECRET}
      - API_URL=${API_URL}
    networks:
      - marweb

  admin:
    container_name: Admin
    restart: always
    build: ./marwebadmin
    ports:
      - "3100:3100"  # Portul pe care rulează aplicația de administrare (poți schimba portul după necesități)
    depends_on:
      - database
      - nestjs

  database:
    image: postgres:16.3
    container_name: marweb_database
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
       - "5433:5432"  # Portul 5433 al gazdei asociat cu portul 5432 al containerului PostgreSQL
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./postgres-backup:/docker-entrypoint-initdb.d
    networks:
      - marweb

networks:
  marweb:
    driver: bridge
